A crash in RHEL6 s390 builds has been tracked down to this commit:
https://gitlab.gnome.org/GNOME/glib/commit/b1dd594a22e3499caafdeccd7fa223a032b9e177

While the reason for the crash is not understood yet, reversing this commit
works around the issue and gives us a working s390 build.

diff --git a/glib/gmem.c b/glib/gmem.c
index c4f42c5..7573668 100644
--- a/glib/gmem.c
+++ b/glib/gmem.c
@@ -209,6 +209,9 @@ g_free (gpointer mem)
  * Otherwise, the variable is destroyed using @destroy and the
  * pointer is set to %NULL.
  *
+ * This function is threadsafe and modifies the pointer atomically,
+ * using memory barriers where needed.
+ *
  * A macro is also included that allows this function to be used without
  * pointer casts.
  *
@@ -221,12 +224,15 @@ g_clear_pointer (gpointer      *pp,
 {
   gpointer _p;
 
-  _p = *pp;
+  /* This is a little frustrating.
+   * Would be nice to have an atomic exchange (with no compare).
+   */
+  do
+    _p = g_atomic_pointer_get (pp);
+  while G_UNLIKELY (!g_atomic_pointer_compare_and_exchange (pp, _p, NULL));
+
   if (_p)
-    {
-      *pp = NULL;
-      destroy (_p);
-    }
+    destroy (_p);
 }
 
 /**
diff --git a/glib/gmem.h b/glib/gmem.h
index 9530512..d586f47 100644
--- a/glib/gmem.h
+++ b/glib/gmem.h
@@ -110,22 +110,23 @@ gpointer g_try_realloc_n  (gpointer	 mem,
 			   gsize	 n_blocks,
 			   gsize	 n_block_bytes) G_GNUC_WARN_UNUSED_RESULT;
 
+
 #define g_clear_pointer(pp, destroy) \
   G_STMT_START {                                                               \
     G_STATIC_ASSERT (sizeof *(pp) == sizeof (gpointer));                       \
-    /* Only one access, please; work around type aliasing */                   \
-    union { char *in; gpointer *out; } _pp;                                    \
+    /* Only one access, please */                                              \
+    gpointer *_pp = (gpointer *) (pp);                                         \
     gpointer _p;                                                               \
     /* This assignment is needed to avoid a gcc warning */                     \
     GDestroyNotify _destroy = (GDestroyNotify) (destroy);                      \
                                                                                \
-    _pp.in = (char *) (pp);                                                    \
-    _p = *_pp.out;                                                             \
-    if (_p) 								       \
-      { 								       \
-        *_pp.out = NULL;                                                       \
-        _destroy (_p);                                                         \
-      }                                                                        \
+    (void) (0 ? (gpointer) *(pp) : 0);                                         \
+    do                                                                         \
+      _p = g_atomic_pointer_get (_pp);                                         \
+    while G_UNLIKELY (!g_atomic_pointer_compare_and_exchange (_pp, _p, NULL)); \
+                                                                               \
+    if (_p)                                                                    \
+      _destroy (_p);                                                           \
   } G_STMT_END
 
 /**
diff --git a/gobject/gobject.c b/gobject/gobject.c
index 81a1162..683a261 100644
--- a/gobject/gobject.c
+++ b/gobject/gobject.c
@@ -3365,6 +3365,9 @@ g_object_unref (gpointer _object)
  * Otherwise, the reference count of the object is decreased and the
  * pointer is set to %NULL.
  *
+ * This function is threadsafe and modifies the pointer atomically,
+ * using memory barriers where needed.
+ *
  * A macro is also included that allows this function to be used without
  * pointer casts.
  *
