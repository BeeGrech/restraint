Set the pkg-config version to what RHEL4 has.  This seems to be fine.

This also reverts the pthread changes that do not exist on RHEL4
https://github.com/GNOME/glib/commit/1de36e775599e77f2fe47b381f0e5b1b62e93f66.patch
https://github.com/GNOME/glib/commit/5103c5d643f7e7de7983619204a25c3c774478e8.patch

diff --git a/configure b/configure
index 12faeef..ff4b96f 100755
--- a/configure
+++ b/configure
@@ -7027,7 +7027,7 @@ fi
 
 fi
 if test -n "$PKG_CONFIG"; then
-	_pkg_min_version=0.16
+	_pkg_min_version=0.15
 	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking pkg-config is at least version $_pkg_min_version" >&5
 $as_echo_n "checking pkg-config is at least version $_pkg_min_version... " >&6; }
 	if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then
diff --git a/glib/gthread-posix.c b/glib/gthread-posix.c
index 5fff514..8b74709 100644
--- a/glib/gthread-posix.c
+++ b/glib/gthread-posix.c
@@ -655,13 +655,8 @@ g_cond_impl_new (void)
   gint status;
 
   pthread_condattr_init (&attr);
-
-#ifdef HAVE_PTHREAD_COND_TIMEDWAIT_RELATIVE_NP
-#elif defined (HAVE_PTHREAD_CONDATTR_SETCLOCK) && defined (CLOCK_MONOTONIC)
-  if G_UNLIKELY ((status = pthread_condattr_setclock (&attr, CLOCK_MONOTONIC)) != 0)
-    g_thread_abort (status, "pthread_condattr_setclock");
-#else
-#error Cannot support GCond on your platform.
+#if defined (HAVE_PTHREAD_CONDATTR_SETCLOCK) && defined (CLOCK_MONOTONIC)
+  pthread_condattr_setclock (&attr, CLOCK_MONOTONIC);
 #endif
 
   cond = malloc (sizeof (pthread_cond_t));
@@ -875,41 +870,19 @@ g_cond_wait_until (GCond  *cond,
   struct timespec ts;
   gint status;
 
-#ifdef HAVE_PTHREAD_COND_TIMEDWAIT_RELATIVE_NP
-  /* end_time is given relative to the monotonic clock as returned by
-   * g_get_monotonic_time().
-   *
-   * Since this pthreads wants the relative time, convert it back again.
-   */
-  {
-    gint64 now = g_get_monotonic_time ();
-    gint64 relative;
-
-    if (end_time <= now)
-      return FALSE;
-
-    relative = end_time - now;
+  ts.tv_sec = end_time / 1000000;
+  ts.tv_nsec = (end_time % 1000000) * 1000;
 
-    ts.tv_sec = relative / 1000000;
-    ts.tv_nsec = (relative % 1000000) * 1000;
-
-    if ((status = pthread_cond_timedwait_relative_np (g_cond_get_impl (cond), g_mutex_get_impl (mutex), &ts)) == 0)
-      return TRUE;
-  }
-#elif defined (HAVE_PTHREAD_CONDATTR_SETCLOCK) && defined (CLOCK_MONOTONIC)
-  /* This is the exact check we used during init to set the clock to
-   * monotonic, so if we're in this branch, timedwait() will already be
-   * expecting a monotonic clock.
-   */
-  {
-    ts.tv_sec = end_time / 1000000;
-    ts.tv_nsec = (end_time % 1000000) * 1000;
-
-    if ((status = pthread_cond_timedwait (g_cond_get_impl (cond), g_mutex_get_impl (mutex), &ts)) == 0)
-      return TRUE;
-  }
+#if defined(HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC)
+  if ((status = pthread_cond_timedwait_monotonic (g_cond_get_impl (cond), g_mutex_get_impl (mutex), &ts)) == 0)
+    return TRUE;
+#elif defined(HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC_NP)
+  if ((status = pthread_cond_timedwait_monotonic_np (g_cond_get_impl (cond), g_mutex_get_impl (mutex), &ts)) == 0)
+    return TRUE;
 #else
-#error Cannot support GCond on your platform.
+  /* Pray that the cond is actually using the monotonic clock */
+  if ((status = pthread_cond_timedwait (g_cond_get_impl (cond), g_mutex_get_impl (mutex), &ts)) == 0)
+    return TRUE;
 #endif
 
   if G_UNLIKELY (status != ETIMEDOUT)
