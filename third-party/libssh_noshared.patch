Index: b/CMakeLists.txt
===================================================================
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -153,6 +153,7 @@ message(STATUS "Server support : ${WITH_
 message(STATUS "GSSAPI support : ${WITH_GSSAPI}")
 message(STATUS "Pcap debugging support : ${WITH_PCAP}")
 message(STATUS "With static library: ${WITH_STATIC_LIB}")
+message(STATUS "Without shared library: ${WITHOUT_SHARED_LIB}")
 message(STATUS "Unit testing: ${WITH_TESTING}")
 message(STATUS "Client code Unit testing: ${WITH_CLIENT_TESTING}")
 if (WITH_INTERNAL_DOC)
Index: b/DefineOptions.cmake
===================================================================
--- a/DefineOptions.cmake
+++ b/DefineOptions.cmake
@@ -4,6 +4,7 @@ option(WITH_SSH1 "Build with SSH1 suppor
 option(WITH_SFTP "Build with SFTP support" ON)
 option(WITH_SERVER "Build with SSH server support" ON)
 option(WITH_STATIC_LIB "Build with a static library" OFF)
+option(WITHOUT_SHARED_LIB "Build without shared library" OFF)
 option(WITH_DEBUG_CRYPTO "Build with cryto debug output" OFF)
 option(WITH_DEBUG_CALLTRACE "Build with calltrace debug output" ON)
 option(WITH_GCRYPT "Compile against libgcrypt" OFF)
@@ -30,4 +31,8 @@ endif (WITH_TESTING)
 
 if (WITH_NACL)
   set(WITH_NACL ON)
-endif (WITH_NACL)
\ No newline at end of file
+endif (WITH_NACL)
+
+if (WITHOUT_SHARED_LIB)
+  set(WITH_EXAMPLES OFF)
+endif (WITHOUT_SHARED_LIB)
Index: b/src/CMakeLists.txt
===================================================================
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -92,10 +92,12 @@ set(LIBSSH_LINK_LIBRARIES
   CACHE INTERNAL "libssh link libraries"
 )
 
-set(LIBSSH_SHARED_LIBRARY
-  ssh_shared
-  CACHE INTERNAL "libssh shared library"
-)
+if (NOT WITHOUT_SHARED_LIB)
+  set(LIBSSH_SHARED_LIBRARY
+    ssh_shared
+    CACHE INTERNAL "libssh shared library"
+  )
+endif (NOT WITHOUT_SHARED_LIB)
 
 if (WITH_STATIC_LIB)
   set(LIBSSH_STATIC_LIBRARY
@@ -225,40 +227,42 @@ include_directories(
   ${LIBSSH_PRIVATE_INCLUDE_DIRS}
 )
 
-add_library(${LIBSSH_SHARED_LIBRARY} SHARED ${libssh_SRCS})
-
-target_link_libraries(${LIBSSH_SHARED_LIBRARY} ${LIBSSH_LINK_LIBRARIES})
-
-set_target_properties(
-  ${LIBSSH_SHARED_LIBRARY}
-    PROPERTIES
-      VERSION
-        ${LIBRARY_VERSION}
-      SOVERSION
-        ${LIBRARY_SOVERSION}
-      OUTPUT_NAME
-        ssh
-      DEFINE_SYMBOL
-        LIBSSH_EXPORTS
-)
+if (NOT WITHOUT_SHARED_LIB)
+  add_library(${LIBSSH_SHARED_LIBRARY} SHARED ${libssh_SRCS})
 
-if (WITH_VISIBILITY_HIDDEN)
-  set_target_properties(${LIBSSH_SHARED_LIBRARY} PROPERTIES COMPILE_FLAGS "-fvisibility=hidden")
-endif (WITH_VISIBILITY_HIDDEN)
+  target_link_libraries(${LIBSSH_SHARED_LIBRARY} ${LIBSSH_LINK_LIBRARIES})
 
-if (MINGW)
-    set_target_properties(${LIBSSH_SHARED_LIBRARY} PROPERTIES LINK_FLAGS "-Wl,--enable-stdcall-fixup")
-endif ()
-
-
-install(
-  TARGETS
+  set_target_properties(
     ${LIBSSH_SHARED_LIBRARY}
-  RUNTIME DESTINATION ${BIN_INSTALL_DIR}
-  LIBRARY DESTINATION ${LIB_INSTALL_DIR}
-  ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
-  COMPONENT libraries
-)
+      PROPERTIES
+        VERSION
+          ${LIBRARY_VERSION}
+        SOVERSION
+          ${LIBRARY_SOVERSION}
+        OUTPUT_NAME
+          ssh
+        DEFINE_SYMBOL
+          LIBSSH_EXPORTS
+  )
+
+  if (WITH_VISIBILITY_HIDDEN)
+    set_target_properties(${LIBSSH_SHARED_LIBRARY} PROPERTIES COMPILE_FLAGS "-fvisibility=hidden")
+  endif (WITH_VISIBILITY_HIDDEN)
+
+  if (MINGW)
+      set_target_properties(${LIBSSH_SHARED_LIBRARY} PROPERTIES LINK_FLAGS "-Wl,--enable-stdcall-fixup")
+  endif ()
+
+
+  install(
+    TARGETS
+      ${LIBSSH_SHARED_LIBRARY}
+    RUNTIME DESTINATION ${BIN_INSTALL_DIR}
+    LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+    COMPONENT libraries
+  )
+endif (NOT_WITHOUT_SHARED_LIB)
 
 if (WITH_STATIC_LIB)
   add_library(${LIBSSH_STATIC_LIBRARY} STATIC ${libssh_SRCS})
Index: b/src/threads/CMakeLists.txt
===================================================================
--- a/src/threads/CMakeLists.txt
+++ b/src/threads/CMakeLists.txt
@@ -11,10 +11,12 @@ set(LIBSSH_THREADS_PRIVATE_INCLUDE_DIRS
     ${CMAKE_BINARY_DIR}
 )
 
-set(LIBSSH_THREADS_SHARED_LIBRARY
-  ssh_threads_shared
-  CACHE INTERNAL "libssh threads shared library"
-)
+if (NOT WITHOUT_SHARED_LIB)
+  set(LIBSSH_THREADS_SHARED_LIBRARY
+    ssh_threads_shared
+    CACHE INTERNAL "libssh threads shared library"
+  )
+endif (NOT WITHOUT_SHARED_LIB)
 
 if (WITH_STATIC_LIB)
   set(LIBSSH_THREADS_STATIC_LIBRARY
@@ -23,9 +25,11 @@ if (WITH_STATIC_LIB)
   )
 endif (WITH_STATIC_LIB)
 
-set(LIBSSH_THREADS_LINK_LIBRARIES
-    ${LIBSSH_SHARED_LIBRARY}
-)
+if (NOT WITHOUT_SHARED_LIB)
+  set(LIBSSH_THREADS_LINK_LIBRARIES
+      ${LIBSSH_SHARED_LIBRARY}
+  )
+endif (NOT WITHOUT_SHARED_LIB)
 
 message(STATUS "threads library: Threads_FOUND=${Threads_FOUND}")
 
@@ -59,35 +63,37 @@ include_directories(
 if (libssh_threads_SRCS)
     set(LIBSSH_THREADS ON CACHE "libssh threads lib" INTERNAL)
 
-    add_library(${LIBSSH_THREADS_SHARED_LIBRARY} SHARED ${libssh_threads_SRCS})
+    if (NOT WITHOUT_SHARED_LIB)
+      add_library(${LIBSSH_THREADS_SHARED_LIBRARY} SHARED ${libssh_threads_SRCS})
 
-    target_link_libraries(${LIBSSH_THREADS_SHARED_LIBRARY} ${LIBSSH_THREADS_LINK_LIBRARIES})
+      target_link_libraries(${LIBSSH_THREADS_SHARED_LIBRARY} ${LIBSSH_THREADS_LINK_LIBRARIES})
 
-    set_target_properties(
-      ${LIBSSH_THREADS_SHARED_LIBRARY}
-        PROPERTIES
-          VERSION
-            ${LIBRARY_VERSION}
-          SOVERSION
-            ${LIBRARY_SOVERSION}
-          OUTPUT_NAME
-            ssh_threads
-          DEFINE_SYMBOL
-            LIBSSH_EXPORTS
-    )
-
-    if (WITH_VISIBILITY_HIDDEN)
-      set_target_properties(${LIBSSH_THREADS_SHARED_LIBRARY} PROPERTIES COMPILE_FLAGS "-fvisibility=hidden")
-    endif (WITH_VISIBILITY_HIDDEN)
-
-    install(
-      TARGETS
+      set_target_properties(
         ${LIBSSH_THREADS_SHARED_LIBRARY}
-      RUNTIME DESTINATION ${BIN_INSTALL_DIR}
-      LIBRARY DESTINATION ${LIB_INSTALL_DIR}
-      ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
-      COMPONENT libraries
-    )
+          PROPERTIES
+            VERSION
+              ${LIBRARY_VERSION}
+            SOVERSION
+              ${LIBRARY_SOVERSION}
+            OUTPUT_NAME
+              ssh_threads
+            DEFINE_SYMBOL
+              LIBSSH_EXPORTS
+      )
+
+      if (WITH_VISIBILITY_HIDDEN)
+        set_target_properties(${LIBSSH_THREADS_SHARED_LIBRARY} PROPERTIES COMPILE_FLAGS "-fvisibility=hidden")
+      endif (WITH_VISIBILITY_HIDDEN)
+
+      install(
+        TARGETS
+          ${LIBSSH_THREADS_SHARED_LIBRARY}
+        RUNTIME DESTINATION ${BIN_INSTALL_DIR}
+        LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+        ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+        COMPONENT libraries
+      )
+    endif (NOT WITHOUT_SHARED_LIB)
 
     if (WITH_STATIC_LIB)
       add_library(${LIBSSH_THREADS_STATIC_LIBRARY} STATIC ${libssh_threads_SRCS})
