diff -ur glib-2.34.3/configure glib-2.34.3.patched/configure
--- glib-2.34.3/configure	2012-11-27 05:08:50.000000000 +1000
+++ glib-2.34.3.patched/configure	2013-02-07 20:56:02.732979657 +1000
@@ -7509,13 +7509,13 @@
 
         if test -n "$PYTHON"; then
       # If the user set $PYTHON, use it and don't search something else.
-      { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $PYTHON version is >= 2.5" >&5
-$as_echo_n "checking whether $PYTHON version is >= 2.5... " >&6; }
+      { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $PYTHON version is >= 2.2" >&5
+$as_echo_n "checking whether $PYTHON version is >= 2.2... " >&6; }
       prog="import sys
 # split strings by '.' and convert to numeric.  Append some zeros
 # because we need at least 4 digits for the hex conversion.
 # map returns an iterator in Python 3.0 and a list in 2.x
-minver = list(map(int, '2.5'.split('.'))) + [0, 0, 0]
+minver = list(map(int, '2.2'.split('.'))) + [0, 0, 0]
 minverhex = 0
 # xrange is not present in Python 3.0 and range returns an iterator
 for i in list(range(0, 4)): minverhex = (minverhex << 8) + minver[i]
@@ -7536,8 +7536,8 @@
     else
       # Otherwise, try each interpreter until we find one that satisfies
       # VERSION.
-      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for a Python interpreter with version >= 2.5" >&5
-$as_echo_n "checking for a Python interpreter with version >= 2.5... " >&6; }
+      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for a Python interpreter with version >= 2.2" >&5
+$as_echo_n "checking for a Python interpreter with version >= 2.2... " >&6; }
 if ${am_cv_pathless_PYTHON+:} false; then :
   $as_echo_n "(cached) " >&6
 else
@@ -7548,7 +7548,7 @@
 # split strings by '.' and convert to numeric.  Append some zeros
 # because we need at least 4 digits for the hex conversion.
 # map returns an iterator in Python 3.0 and a list in 2.x
-minver = list(map(int, '2.5'.split('.'))) + [0, 0, 0]
+minver = list(map(int, '2.2'.split('.'))) + [0, 0, 0]
 minverhex = 0
 # xrange is not present in Python 3.0 and range returns an iterator
 for i in list(range(0, 4)): minverhex = (minverhex << 8) + minver[i]
diff -ur glib-2.34.3/gio/gdbus-2.0/codegen/codegen_docbook.py glib-2.34.3.patched/gio/gdbus-2.0/codegen/codegen_docbook.py
--- glib-2.34.3/gio/gdbus-2.0/codegen/codegen_docbook.py	2012-11-21 00:27:12.000000000 +1000
+++ glib-2.34.3.patched/gio/gdbus-2.0/codegen/codegen_docbook.py	2013-02-11 20:54:38.000000000 +1000
@@ -24,10 +24,10 @@
 import sys
 import re
 
-from . import config
-from . import utils
-from . import dbustypes
-from . import parser
+import config
+import utils
+import dbustypes
+import parser
 
 # ----------------------------------------------------------------------------------------------------
 
@@ -259,8 +259,12 @@
                 self.expand_member_dict[key] = value
         # Make sure to expand the keys in reverse order so e.g. #org.foo.Iface:MediaCompat
         # is evaluated before #org.foo.Iface:Media ...
-        self.expand_member_dict_keys = sorted(self.expand_member_dict.keys(), reverse=True)
-        self.expand_iface_dict_keys = sorted(self.expand_iface_dict.keys(), reverse=True)
+        self.expand_member_dict_keys = self.expand_member_dict.keys()
+        self.expand_member_dict_keys.sort()
+        self.expand_member_dict_keys.reverse()
+        self.expand_iface_dict_keys = self.expand_iface_dict.keys()
+        self.expand_iface_dict_keys.sort()
+        self.expand_iface_dict_keys.reverse()
 
     def generate(self):
         for i in self.ifaces:
diff -ur glib-2.34.3/gio/gdbus-2.0/codegen/codegen_main.py glib-2.34.3.patched/gio/gdbus-2.0/codegen/codegen_main.py
--- glib-2.34.3/gio/gdbus-2.0/codegen/codegen_main.py	2012-11-27 02:52:48.000000000 +1000
+++ glib-2.34.3.patched/gio/gdbus-2.0/codegen/codegen_main.py	2013-02-11 20:48:19.000000000 +1000
@@ -24,12 +24,12 @@
 import sys
 import optparse
 
-from . import config
-from . import utils
-from . import dbustypes
-from . import parser
-from . import codegen
-from . import codegen_docbook
+import config
+import utils
+import dbustypes
+import parser
+import codegen
+import codegen_docbook
 
 def find_arg(arg_list, arg_name):
     for a in arg_list:
diff -ur glib-2.34.3/gio/gdbus-2.0/codegen/codegen.py glib-2.34.3.patched/gio/gdbus-2.0/codegen/codegen.py
--- glib-2.34.3/gio/gdbus-2.0/codegen/codegen.py	2012-11-21 00:27:12.000000000 +1000
+++ glib-2.34.3.patched/gio/gdbus-2.0/codegen/codegen.py	2013-02-11 20:57:34.000000000 +1000
@@ -23,9 +23,9 @@
 
 import sys
 
-from . import config
-from . import utils
-from . import dbustypes
+import config
+import utils
+import dbustypes
 
 # ----------------------------------------------------------------------------------------------------
 
@@ -304,7 +304,9 @@
             #
             # See https://bugzilla.gnome.org/show_bug.cgi?id=647577#c5
             # for discussion
-            for key in sorted(function_pointers.keys(), key=utils.version_cmp_key):
+            keys_sort = [(utils.version_cmp_key(k), k) for k in function_pointers.keys()]
+            keys_sort.sort()
+            for _, key in keys_sort:
                 self.h.write('%s'%function_pointers[key])
 
             self.h.write('};\n')
@@ -826,7 +828,7 @@
                     self.c.write('  },\n'
                                  '  "handle-%s",\n'
                                  '  %s\n'
-                                 %(m.name_hyphen, 'TRUE' if unix_fd else 'FALSE'))
+                                 %(m.name_hyphen, unix_fd and 'TRUE' or 'FALSE'))
                     self.c.write('};\n'
                                  '\n')
 
@@ -1019,7 +1021,9 @@
                 value  = '@get_%s: '%(p.name_lower)
                 value += 'Getter for the #%s:%s property.'%(i.camel_name, p.name_hyphen)
                 doc_bits[key] = value
-        for key in sorted(doc_bits.keys(), key=utils.version_cmp_key):
+        keys_sort = [(utils.version_cmp_key(k), k) for k in doc_bits.keys()]
+        keys_sort.sort()
+        for _, key in keys_sort:
             self.c.write(' * %s\n'%doc_bits[key])
 
         self.c.write(self.docbook_gen.expand(
diff -ur glib-2.34.3/gio/gdbus-2.0/codegen/dbustypes.py glib-2.34.3.patched/gio/gdbus-2.0/codegen/dbustypes.py
--- glib-2.34.3/gio/gdbus-2.0/codegen/dbustypes.py	2012-11-21 00:27:12.000000000 +1000
+++ glib-2.34.3.patched/gio/gdbus-2.0/codegen/dbustypes.py	2013-02-11 20:48:19.000000000 +1000
@@ -21,7 +21,7 @@
 #
 # Author: David Zeuthen <davidz@redhat.com>
 
-from . import utils
+import utils
 
 class Annotation:
     def __init__(self, key, value):
diff -ur glib-2.34.3/gio/gdbus-2.0/codegen/parser.py glib-2.34.3.patched/gio/gdbus-2.0/codegen/parser.py
--- glib-2.34.3/gio/gdbus-2.0/codegen/parser.py	2012-11-21 00:27:12.000000000 +1000
+++ glib-2.34.3.patched/gio/gdbus-2.0/codegen/parser.py	2013-02-11 20:48:19.000000000 +1000
@@ -24,7 +24,7 @@
 import sys
 import xml.parsers.expat
 
-from . import dbustypes
+import dbustypes
 
 class DBusXMLParser:
     STATE_TOP = 'top'
diff -ur glib-2.34.3/gio/gdbus-2.0/codegen/utils.py glib-2.34.3.patched/gio/gdbus-2.0/codegen/utils.py
--- glib-2.34.3/gio/gdbus-2.0/codegen/utils.py	2012-11-21 00:27:12.000000000 +1000
+++ glib-2.34.3.patched/gio/gdbus-2.0/codegen/utils.py	2013-02-11 20:48:19.000000000 +1000
@@ -100,5 +100,5 @@
 def version_cmp_key(key):
     # If the 'since' version is empty put a 0 in its place as this will
     # allow LooseVersion to work and will always compare lower.
-    v = key[0] if key[0] else '0'
+    v = key[0] or '0'
     return (distutils.version.LooseVersion(v), key[1])
